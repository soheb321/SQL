1. List the commands for adding, updating, and deleting data.

-INSERT INTO <tablename> VALUES <your new values>
-UPDATE <tablename> SET <values to be updated> WHERE <selector>
-DELETE FROM <tablename> WHERE <selector>

2. Explain the structure for each type of command.

-you need to clarify the table name, have the data that you want to add or update, and then have some sort of selector. For deleting data, you just need the table name and selector.

3. What are some of the data types that can be used in tables? Give a real-world example of each type.

Boolean: True/False - Payment made
Float: -Numbers with decimals- calculating PI
Integer: -regular number with no decimal; userID
date: -calendar date; Date purchased

4. Decide how to create a new table to hold a list of people invited to a wedding dinner. The table needs to have first and last names, whether they sent in their RSVP, the number of guests they are bringing, and the number of meals (1 for adults and 1/2 for children).

a. Which data type would you use to store each of the following pieces of information?
First and last name. -text
Whether they sent in their RSVP. -boolean
Number of guests. -Integer
Number of meals. -integer

b. Write a command that creates the table to track the wedding dinner.

CREATE TABLE dinner (
    name text,
    rsvp boolean,
    guests integer,
    meals integer
);


c. Write a command that adds a column to track whether the guest sent a thank you card.

ALTER TABLE dinner ADD COLUMN thankyou boolean;

d. You have decided to move the data about the meals to another table, so write a command to remove the column storing the number meals from the wedding table.

ALTER TABLE dinner DROP COLUMN meals;

e. The guests will need a place to sit at the reception, so write a command that adds a column for table number.

ALTER TABLE dinner ADD COLUMN tablenumber integer;

f. The wedding is over and we do not need to keep this information, so write a command that deletes the table numbers from the database.

ALTER TABLE dinner DROP COLUMN tablenumber;

5. Write a command to create a new table to hold the books in a library with the columns ISBN, title, author, genre, publishing date, number of copies, and available copies.

CREATE TABLE library (
    ISBN integer,
    title text,
    author text,
    genre text,
    publishing_date date,
    number_of_copies integer,
    available_copies integer
)

a. Find three books and add their information to the table.

INSERT INTO library (ISBN, title, author, genre, publishing_date, number_of_copies, available_copies)
VALUES
(9780307947307, 'The Stand', 'Stephen King', 'Apocalyptic Fiction', 1978-01-09, 5, 2),
(9781503215672, 'The Adventures of Tom Sawyer', 'Mark Twain', 'Fiction', 1884-12-10, 8, 3),
(9781501144264, 'The Long Walk', 'Stephen King', 'Horror', 1979-07-01, 2, 2);

b. Someone has just checked out one of the books. Change the number of available copies to 1 fewer.

UPDATE library SET available_copies=available_copies - 1 WHERE ISBN=781503215672;

c. Now one of the books has been added to the banned books list. Remove it from the table.

DELETE FROM library WHERE ISBN=9781501144264;

6. Write a command to make a new table to hold spacecrafts. Information should include id, name, year launched, country of origin, a brief description of the mission, orbiting body, if it is currently operating, and its approximate miles from Earth. 

CREATE TABLE spacecrafts (
    id integer,
    name text,
    year_launched integer,
    country_of_origin text,
    mission_description text,
    orbiting_body text,
    currently_operating boolean,
    approx_miles_from_earth integer
);


a. In addition to the table creation, provide commands that perform the following operations:

a. Add three non-Earth-orbiting satellites to the table.

INSERT INTO spacecrafts (id, name, year_launched, country_of_origin, mission_description, orbiting_body, currently_operating, approx_miles_from_earth)
VALUES
(1, 'craft 1', 1988, 'USA', 'Take soil samples from Neptune.', 'Neptune', TRUE, 2,700,000,000),
(2, 'craft 2', 1989, 'USA', 'Build a fort on Mars.', 'Mars', TRUE, 33,900,000),
(3, 'craft 3', 1990, 'USA', 'Play golf on the moon.', 'Moon', TRUE, 225,000);

b. Remove one of the satellites from the table since it has just crashed into the planet.

DELETE FROM spacecrafts WHERE id=1;

c. Edit another satellite because it is no longer operating and change the value to reflect that.

UPDATE spacecrafts SET currently_operating=FALSE WHERE id=3;

7.Write a command to create a new table to hold the emails in your inbox. This table should include an id, the subject line, the sender, any additional recipients, the body of the email, the timestamp, whether or not you have read the email, and the id of the email chain it's in. 

CREATE TABLE emails (
    id integer,
    subject_line text,
    sender text,
    additional_recipients text[],
    body text,
    timestamp TIMESTAMP,
    read boolean,
    chain_id integer
);



Also provide commands that perform the following operations:

a. Add three new emails to the inbox.
INSERT INTO emails (id, subject_line, sender, additional_recipients, body, timestamp, read, chain_id)
VALUES
(1, 'Hi mom and jane', 'bob@mac.com', '{jane@mac.com, mom@mac.com}' 'Mom, can you send me money? Love Bob', TIMESTAMP '2018-04-01 04:01:00', TRUE, 1),
(2, 'Re: Hi mom and jane', 'mom@mac.com', {jane@mac.com, bob@mac.com}, 'I can send you some money, Jane do you need some?', TIMESTAMP '2018-04-01 05:01:00', TRUE, 1),
(3, 'Re: Hi mom and jane', 'jane@mac.com', '{bob@mac.com, mom@mac.com}', 'What about me?!!?!', TIMESTAMP '2018-04-01 06:01:00', TRUE, 1));

b. You deleted one of the emails, so write a command to remove the row from the inbox table.

DELETE from emails WHERE sender='mom@mac.com';

c. You started reading an email but just heard a crash in another room. Mark the email as unread before investigating the crash, so you can come back and read it later.

UPDATE emails SET read=FALSE WHERE sender='jane@mac.com'